
jQuery(function () {
	initSearchForms();
});


(function ($, window) {
	// jquery plugin interface
	$.fn.autoCompleteForm = function (opt) {
			opt = $.extend({
				startCount: 1,
				dataAttr: 'q',
				ajaxAttr: 'ajax=1',
				listItems: 'li',
				listItemsFillsInput: true,
				alwaysRefresh: false,
				filterResults: true,
				highlightMatches: false,
				selectedClass: 'selected-line',
				resultsHolder: '.ajax-holder',
				inputField: 'input.text-input',
				hideDelay: 200
			}, opt);
			return this.each(function () {
				var form = $(this);
				var target = form.data('search-url') ? form.data('search-url') : form.attr('action');
				var input = form.find(opt.inputField).attr('autocomplete', 'off');
				var ajaxHolder = form.find(opt.resultsHolder).hide();
				var acXHR, listItems, lastData, inFocus, focusTimer, visibleItems, visibleCount, currentIndex = 0;
				if (opt.filterResults) opt.alwaysRefresh = false;
				// load autocomplete data
				function loadData(callback) {
						// abort previous request if not completed
						if (acXHR && typeof acXHR.abort === 'function') {
							acXHR.abort();
						}
						// start new request
						acXHR = $.ajax({
							url: target,
							type: form.attr('method'),
							dataType: 'text',
							data: opt.ajaxAttr + '&' + opt.dataAttr + '=' + input.val(),
							success: function (msg) {
								// updating results
								updateDrop(msg);
								filterData();
								showDrop();
							},
							error: function () {
								// ajax error handling
								if (typeof opt.onerror === 'function') {
									opt.onerror.apply(this, arguments);
								}
							}
						})
					}
					// filter loaded data

				function filterData() {
						if (listItems) {
							showDrop();
							// show only items containing input text
							if (opt.filterResults) {
								listItems.show().each(function () {
									var item = $(this);
									item.html(item.data('orightml'));
									if (item.text().toLowerCase().indexOf(input.val().toLowerCase()) != -1) {
										item.show();
									} else {
										item.hide();
									}
								});
								if (!listItems.filter(':visible').length) {
									hideDrop();
								}
							}
							// highlight matches
							if (opt.highlightMatches) {
								listItems.children().each(function (i, obj) {
									if (input.val().length >= opt.startCount) {
										jQuery(obj).html(highlightWords(jQuery(obj).text(), input.val()));
									}
								});
							}
						}
					}
					// update dropdown content

				function updateDrop(text) {
						if (lastData != text) {
							lastData = text;
							currentIndex = -1;
							ajaxHolder.html(text);
							listItems = ajaxHolder.find(opt.listItems);
							listItems.each(function () {
								// save original html data
								var curItem = $(this);
								curItem.data('orightml', curItem.html());
								// element click behavior
								curItem.click(function () {
									//return selectItem(curItem, true);
								});
								// element hover behavior
								curItem.hover(function () {
									listItems.removeClass(opt.selectedClass);
									curItem.addClass(opt.selectedClass);
									currentIndex = listItems.filter(':visible').index(curItem);
								});
							});
						}
					}
					// toggle autocomplete dropdown

				function showDrop() {
					if (input.val().length >= opt.startCount) {
						ajaxHolder.show();
						if (!listItems.filter(':visible').length) hideDrop();
					} else {
						ajaxHolder.hide();
					}
				}

				function hideDrop() {
					ajaxHolder.hide();
				}

				function selectItem(obj, realEvent) {
						hideDrop();
						if (opt.listItemsFillsInput) {
							input.val(obj.text()).focus();
							return false;
						} else {
							// example redirect
							if (!realEvent) {
								window.location.href = obj.find('a:eq(0)').attr('href');
							}
						}
					}
					// event handlers
				input.keyup(function (e) {
					// skip system keys
					if (e.keyCode == 27 || e.keyCode == 13 || e.keyCode == 38 || e.keyCode == 40) return;
					// load data
					if (input.val().length < opt.startCount) hideDrop();
					if (opt.alwaysRefresh) {
						loadData();
					} else {
						if (!listItems) {
							loadData();
						}
						filterData();
					}
				}).keydown(function (e) {
					if (listItems) {
						visibleItems = listItems.filter(':visible');
						visibleCount = visibleItems.length;
						switch (e.keyCode) {
						case 13:
							selectItem(visibleItems.eq(currentIndex));
							break;
						case 27:
							hideDrop();
							break;
						case 38:
							if (currentIndex >= 0) currentIndex--;
							break;
						case 40:
							if (currentIndex < visibleCount - 1) currentIndex++;
							break;
						}
						// update classes
						listItems.removeClass(opt.selectedClass);
						if (currentIndex != -1) {
							visibleItems.eq(currentIndex).addClass(opt.selectedClass);
						}
					}
				}).focus(function () {
					clearTimeout(focusTimer);
					inFocus = true;
				}).blur(function () {
					inFocus = false;
					focusTimer = setTimeout(hideDrop, opt.hideDelay);
				});
				/*
			form.submit(function(){
				return false;
			});
			*/
			});
		}
		// regexp highlight function

	function escapeRegExp(str) {
		return str.replace(new RegExp("[.*+?|()\\[\\]{}\\\\]", "g"), "\\$&");
	}

	function highlightWords(str, word) {
		var regex = new RegExp("(" + escapeRegExp(word) + ")", "gi");
		return str.replace(regex, "<strong>$1</strong>");
	}
}(jQuery, this));

// searchbox autocomplete

function initSearchForms() {
		jQuery('form.search-form').autoCompleteForm({
			resultsHolder: 'div.ajax-drop',
			inputField: 'input.ac-input',
			alwaysRefresh: false,
			highlightMatches: true
		});
	}
